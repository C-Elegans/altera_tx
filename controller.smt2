; SMT-LIBv2 description generated by Yosys 0.7+     253 (git sha1 305d5252, clang 8.1.0 -fPIC -Os)
; yosys-smt2-module controller
(declare-sort |controller_s| 0)
(declare-fun |controller_is| (|controller_s|) Bool)
; yosys-smt2-register $formal$controller.v:176$9_CHECK 1
(declare-fun |controller#0| (|controller_s|) (_ BitVec 1)) ; $formal$controller.v:176$9_CHECK
(define-fun |controller_n $formal$controller.v:176$9_CHECK| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#0| state)) #b1))
; yosys-smt2-register $formal$controller.v:176$9_EN 1
(declare-fun |controller#1| (|controller_s|) (_ BitVec 1)) ; $formal$controller.v:176$9_EN
(define-fun |controller_n $formal$controller.v:176$9_EN| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#1| state)) #b1))
; yosys-smt2-register $formal$controller.v:179$10_CHECK 1
(declare-fun |controller#2| (|controller_s|) (_ BitVec 1)) ; $formal$controller.v:179$10_CHECK
(define-fun |controller_n $formal$controller.v:179$10_CHECK| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#2| state)) #b1))
; yosys-smt2-register $formal$controller.v:179$10_EN 1
(declare-fun |controller#3| (|controller_s|) (_ BitVec 1)) ; $formal$controller.v:179$10_EN
(define-fun |controller_n $formal$controller.v:179$10_EN| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#3| state)) #b1))
; yosys-smt2-register $formal$controller.v:182$11_CHECK 1
(declare-fun |controller#4| (|controller_s|) (_ BitVec 1)) ; $formal$controller.v:182$11_CHECK
(define-fun |controller_n $formal$controller.v:182$11_CHECK| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#4| state)) #b1))
; yosys-smt2-register $formal$controller.v:182$11_EN 1
(declare-fun |controller#5| (|controller_s|) (_ BitVec 1)) ; $formal$controller.v:182$11_EN
(define-fun |controller_n $formal$controller.v:182$11_EN| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#5| state)) #b1))
; yosys-smt2-register $past$controller.v:176$2$0 1
(declare-fun |controller#6| (|controller_s|) (_ BitVec 1)) ; $past$controller.v:176$2$0
(define-fun |controller_n $past$controller.v:176$2$0| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#6| state)) #b1))
; yosys-smt2-input clk 1
(declare-fun |controller#7| (|controller_s|) Bool) ; \clk
(define-fun |controller_n clk| ((state |controller_s|)) Bool (|controller#7| state))
; yosys-smt2-output fifo_data_in 8
; yosys-smt2-register fifo_data_in 8
(declare-fun |controller#8| (|controller_s|) (_ BitVec 8)) ; \fifo_data_in
(define-fun |controller_n fifo_data_in| ((state |controller_s|)) (_ BitVec 8) (|controller#8| state))
; yosys-smt2-input fifo_empty 1
(declare-fun |controller#9| (|controller_s|) Bool) ; \fifo_empty
(define-fun |controller_n fifo_empty| ((state |controller_s|)) Bool (|controller#9| state))
; yosys-smt2-input fifo_full 1
(declare-fun |controller#10| (|controller_s|) Bool) ; \fifo_full
(define-fun |controller_n fifo_full| ((state |controller_s|)) Bool (|controller#10| state))
; yosys-smt2-input fifo_space_free 12
(declare-fun |controller#11| (|controller_s|) (_ BitVec 12)) ; \fifo_space_free
(define-fun |controller_n fifo_space_free| ((state |controller_s|)) (_ BitVec 12) (|controller#11| state))
; yosys-smt2-output fifo_wr 1
; yosys-smt2-register fifo_wr 1
(declare-fun |controller#12| (|controller_s|) (_ BitVec 1)) ; \fifo_wr
(define-fun |controller_n fifo_wr| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#12| state)) #b1))
; yosys-smt2-output freq_data 8
; yosys-smt2-register freq_data 8
(declare-fun |controller#13| (|controller_s|) (_ BitVec 8)) ; \freq_data
(define-fun |controller_n freq_data| ((state |controller_s|)) (_ BitVec 8) (|controller#13| state))
; yosys-smt2-output freq_wr_divf 1
; yosys-smt2-register freq_wr_divf 1
(declare-fun |controller#14| (|controller_s|) (_ BitVec 1)) ; \freq_wr_divf
(define-fun |controller_n freq_wr_divf| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#14| state)) #b1))
; yosys-smt2-output freq_wr_divr 1
; yosys-smt2-register freq_wr_divr 1
(declare-fun |controller#15| (|controller_s|) (_ BitVec 1)) ; \freq_wr_divr
(define-fun |controller_n freq_wr_divr| ((state |controller_s|)) Bool (= ((_ extract 0 0) (|controller#15| state)) #b1))
; yosys-smt2-register msg_bytes 8
(declare-fun |controller#16| (|controller_s|) (_ BitVec 8)) ; \msg_bytes
(define-fun |controller_n msg_bytes| ((state |controller_s|)) (_ BitVec 8) (|controller#16| state))
; yosys-smt2-register packet_type 8
(declare-fun |controller#17| (|controller_s|) (_ BitVec 8)) ; \packet_type
(define-fun |controller_n packet_type| ((state |controller_s|)) (_ BitVec 8) (|controller#17| state))
; yosys-smt2-input rst 1
(declare-fun |controller#18| (|controller_s|) Bool) ; \rst
(define-fun |controller_n rst| ((state |controller_s|)) Bool (|controller#18| state))
; yosys-smt2-input spi_c_data_in 8
(declare-fun |controller#19| (|controller_s|) (_ BitVec 8)) ; \spi_c_data_in
(define-fun |controller_n spi_c_data_in| ((state |controller_s|)) (_ BitVec 8) (|controller#19| state))
; yosys-smt2-output spi_c_data_out 8
; yosys-smt2-register spi_c_data_out 8
(declare-fun |controller#20| (|controller_s|) (_ BitVec 8)) ; \spi_c_data_out
(define-fun |controller_n spi_c_data_out| ((state |controller_s|)) (_ BitVec 8) (|controller#20| state))
; yosys-smt2-input spi_c_data_stb 1
(declare-fun |controller#21| (|controller_s|) Bool) ; \spi_c_data_stb
(define-fun |controller_n spi_c_data_stb| ((state |controller_s|)) Bool (|controller#21| state))
; yosys-smt2-input spi_tsx_start 1
(declare-fun |controller#22| (|controller_s|) Bool) ; \spi_tsx_start
(define-fun |controller_n spi_tsx_start| ((state |controller_s|)) Bool (|controller#22| state))
; yosys-smt2-register state 5
(declare-fun |controller#23| (|controller_s|) (_ BitVec 5)) ; \state
(define-fun |controller_n state| ((state |controller_s|)) (_ BitVec 5) (|controller#23| state))
; yosys-smt2-assert 0 controller.v:179
(define-fun |controller_a 0| ((state |controller_s|)) Bool (or (= ((_ extract 0 0) (|controller#2| state)) #b1) (not (= ((_ extract 0 0) (|controller#3| state)) #b1)))) ; $assert$controller.v:179$39
(define-fun |controller#24| ((state |controller_s|)) Bool (|controller_is| state)) ; $0$formal$controller.v:169$5_EN[0:0]$43
; yosys-smt2-assume 0 controller.v:169
(define-fun |controller_u 0| ((state |controller_s|)) Bool (or (|controller#18| state) (not (|controller#24| state)))) ; $assume$controller.v:169$36
(define-fun |controller#25| ((state |controller_s|)) (_ BitVec 1) (bvnot (|controller#12| state))) ; $0$formal$controller.v:170$7_CHECK[0:0]$46
; yosys-smt2-assume 1 controller.v:170
(define-fun |controller_u 1| ((state |controller_s|)) Bool (or (= ((_ extract 0 0) (|controller#25| state)) #b1) (not (|controller#24| state)))) ; $assume$controller.v:170$37
; yosys-smt2-assume 2 controller.v:176
(define-fun |controller_u 2| ((state |controller_s|)) Bool (or (= ((_ extract 0 0) (|controller#0| state)) #b1) (not (= ((_ extract 0 0) (|controller#1| state)) #b1)))) ; $assume$controller.v:176$38
; yosys-smt2-assume 3 controller.v:182
(define-fun |controller_u 3| ((state |controller_s|)) Bool (or (= ((_ extract 0 0) (|controller#4| state)) #b1) (not (= ((_ extract 0 0) (|controller#5| state)) #b1)))) ; $assume$controller.v:182$40
(define-fun |controller#26| ((state |controller_s|)) Bool (not (or  (= ((_ extract 0 0) (|controller#16| state)) #b1) (= ((_ extract 1 1) (|controller#16| state)) #b1) (= ((_ extract 2 2) (|controller#16| state)) #b1) (= ((_ extract 3 3) (|controller#16| state)) #b1) (= ((_ extract 4 4) (|controller#16| state)) #b1) (= ((_ extract 5 5) (|controller#16| state)) #b1) (= ((_ extract 6 6) (|controller#16| state)) #b1) (= ((_ extract 7 7) (|controller#16| state)) #b1)))) ; $eq$controller.v:134$15_Y
(define-fun |controller#27| ((state |controller_s|)) Bool (or  (|controller#26| state) false  (|controller#10| state) false)) ; $logic_or$controller.v:134$17_Y
(define-fun |controller#28| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#27| state) #b00000 (|controller#23| state))) ; $procmux$144_Y
(define-fun |controller#29| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#21| state) #b00000 (|controller#23| state))) ; $procmux$149_Y
(define-fun |controller#30| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#21| state) #b10001 (|controller#23| state))) ; $procmux$153_Y
(define-fun |controller#31| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#21| state) #b01001 (|controller#23| state))) ; $procmux$157_Y
(define-fun |controller#32| ((state |controller_s|)) Bool (bvugt (|controller#17| state) #b00000011)) ; $gt$controller.v:93$13_Y
(define-fun |controller#33| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#32| state) #b00000 (concat ((_ extract 1 0) (|controller#17| state)) #b000))) ; $procmux$162_Y
(define-fun |controller#34| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#21| state) (|controller#33| state) (|controller#23| state))) ; $procmux$164_Y
(define-fun |controller#35| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#21| state) #b00010 (|controller#23| state))) ; $procmux$168_Y
(define-fun |controller#36| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#22| state) #b00001 (|controller#23| state))) ; $procmux$172_Y
(define-fun |controller#37| ((state |controller_s|)) Bool (= (|controller#23| state) #b11000)) ; $procmux$119_CMP
(define-fun |controller#38| ((state |controller_s|)) Bool (= (|controller#23| state) #b10001)) ; $procmux$151_CMP
(define-fun |controller#39| ((state |controller_s|)) Bool (= (|controller#23| state) #b10000)) ; $procmux$110_CMP
(define-fun |controller#40| ((state |controller_s|)) Bool (= (|controller#23| state) #b01000)) ; $procmux$159_CMP
(define-fun |controller#41| ((state |controller_s|)) Bool (= (|controller#23| state) #b00010)) ; $procmux$123_CMP
(define-fun |controller#42| ((state |controller_s|)) Bool (= (|controller#23| state) #b00001)) ; $procmux$138_CMP
(define-fun |controller#43| ((state |controller_s|)) Bool (not (or  (= ((_ extract 0 0) (|controller#23| state)) #b1) (= ((_ extract 1 1) (|controller#23| state)) #b1) (= ((_ extract 2 2) (|controller#23| state)) #b1) (= ((_ extract 3 3) (|controller#23| state)) #b1) (= ((_ extract 4 4) (|controller#23| state)) #b1)))) ; $procmux$174_CMP
(define-fun |controller#44| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#43| state) (|controller#36| state) (ite (|controller#42| state) (|controller#35| state) (ite (|controller#41| state) (|controller#34| state) (ite (|controller#40| state) (|controller#31| state) (ite (|controller#39| state) (|controller#30| state) (ite (|controller#38| state) (|controller#29| state) (ite (|controller#37| state) (|controller#28| state) #b00000)))))))) ; $procmux$146_Y
(define-fun |controller#45| ((state |controller_s|)) (_ BitVec 5) (ite (|controller#18| state) #b00000 (|controller#44| state))) ; $0\state[4:0]
(define-fun |controller#46| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#21| state) ((_ extract 7 0) (|controller#11| state)) (|controller#20| state))) ; $procmux$203_Y
(define-fun |controller#47| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#22| state) #b10100101 (|controller#20| state))) ; $procmux$210_Y
(define-fun |controller#48| ((state |controller_s|)) Bool (= (|controller#23| state) #b01001)) ; $procmux$207_CMP
(define-fun |controller#49| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#43| state) (|controller#47| state) (ite (|controller#40| state) (concat #b0000 ((_ extract 11 8) (|controller#11| state))) (ite (|controller#48| state) ((_ extract 7 0) (|controller#11| state)) (ite (|controller#37| state) (|controller#46| state) (|controller#20| state)))))) ; $procmux$205_Y
(define-fun |controller#50| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#18| state) #b00000000 (|controller#49| state))) ; $0\spi_c_data_out[7:0]
(define-fun |controller#51| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#21| state) (|controller#19| state) (|controller#17| state))) ; $procmux$135_Y
(define-fun |controller#52| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#42| state) (|controller#51| state) (|controller#17| state))) ; $procmux$137_Y
(define-fun |controller#53| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#18| state) #b00000000 (|controller#52| state))) ; $0\packet_type[7:0]
(define-fun |controller#54| ((state |controller_s|)) (_ BitVec 8) (bvsub (|controller#16| state) #b00000001)) ; $auto$wreduce.cc:347:run$236 [7:0]
(define-fun |controller#55| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#21| state) (|controller#54| state) (|controller#16| state))) ; $procmux$116_Y
(define-fun |controller#56| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#21| state) (|controller#19| state) (|controller#16| state))) ; $procmux$121_Y
(define-fun |controller#57| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#41| state) (|controller#56| state) (ite (|controller#37| state) (|controller#55| state) (|controller#16| state)))) ; $procmux$118_Y
(define-fun |controller#58| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#18| state) #b00000000 (|controller#57| state))) ; $0\msg_bytes[7:0]
(define-fun |controller#59| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#21| state) #b1 #b0)) ; $procmux$107_Y
(define-fun |controller#60| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#39| state) (|controller#59| state) #b0)) ; $procmux$109_Y
(define-fun |controller#61| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#18| state) #b0 (|controller#60| state))) ; $0\freq_wr_divr[0:0]
(define-fun |controller#62| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#38| state) (|controller#59| state) #b0)) ; $procmux$98_Y
(define-fun |controller#63| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#18| state) #b0 (|controller#62| state))) ; $0\freq_wr_divf[0:0]
(define-fun |controller#64| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#21| state) (|controller#19| state) (|controller#13| state))) ; $procmux$190_Y
(define-fun |controller#65| ((state |controller_s|)) Bool (or  (|controller#38| state) (|controller#39| state))) ; $auto$opt_reduce.cc:132:opt_mux$235
(define-fun |controller#66| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#65| state) (|controller#64| state) (|controller#13| state))) ; $procmux$192_Y
(define-fun |controller#67| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#18| state) #b00000000 (|controller#66| state))) ; $0\freq_data[7:0]
(define-fun |controller#68| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#37| state) (|controller#59| state) #b0)) ; $procmux$88_Y
(define-fun |controller#69| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#18| state) #b0 (|controller#68| state))) ; $0\fifo_wr[0:0]
(define-fun |controller#70| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#21| state) (|controller#19| state) (|controller#8| state))) ; $procmux$180_Y
(define-fun |controller#71| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#37| state) (|controller#70| state) (|controller#8| state))) ; $procmux$182_Y
(define-fun |controller#72| ((state |controller_s|)) (_ BitVec 8) (ite (|controller#18| state) #b00000000 (|controller#71| state))) ; $0\fifo_data_in[7:0]
(define-fun |controller#73| ((state |controller_s|)) (_ BitVec 1) (bvnot (|controller#6| state))) ; $0$formal$controller.v:176$9_CHECK[0:0]$23
(define-fun |controller#74| ((state |controller_s|)) Bool (not (or  (= ((_ extract 0 0) (|controller#12| state)) #b1) false))) ; $logic_not$controller.v:181$33_Y
(define-fun |controller#75| ((state |controller_s|)) Bool (and (or  (= ((_ extract 0 0) (|controller#73| state)) #b1) false) (or  (|controller#74| state) false))) ; $logic_and$controller.v:181$34_Y
(define-fun |controller#76| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#75| state) #b1 #b0)) ; $0$formal$controller.v:182$11_EN[0:0]$28
(define-fun |controller#77| ((state |controller_s|)) (_ BitVec 1) (bvnot (ite (|controller#10| state) #b1 #b0))) ; $0$formal$controller.v:182$11_CHECK[0:0]$27
(define-fun |controller#78| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#24| state) #b0 #b1)) ; $0$formal$controller.v:179$10_EN[0:0]$26
(define-fun |controller#79| ((state |controller_s|)) Bool (and (or  (= ((_ extract 0 0) (|controller#6| state)) #b1) false) (or  (= ((_ extract 0 0) (|controller#12| state)) #b1) false))) ; $logic_and$controller.v:179$30_Y
(define-fun |controller#80| ((state |controller_s|)) Bool (not (or  (|controller#79| state) false))) ; $0$formal$controller.v:179$10_CHECK[0:0]$25
(define-fun |controller#81| ((state |controller_s|)) (_ BitVec 1) (ite (|controller#24| state) #b1 #b0)) ; $0$formal$controller.v:176$9_EN[0:0]$24
(define-fun |controller_a| ((state |controller_s|)) Bool 
  (|controller_a 0| state)
)
(define-fun |controller_u| ((state |controller_s|)) Bool (and
  (|controller_u 0| state)
  (|controller_u 1| state)
  (|controller_u 2| state)
  (|controller_u 3| state)
))
(define-fun |controller_i| ((state |controller_s|)) Bool (and
  (= (= ((_ extract 0 0) (|controller#1| state)) #b1) false) ; $formal$controller.v:176$9_EN
  (= (= ((_ extract 0 0) (|controller#3| state)) #b1) false) ; $formal$controller.v:179$10_EN
  (= (= ((_ extract 0 0) (|controller#5| state)) #b1) false) ; $formal$controller.v:182$11_EN
))
(define-fun |controller_h| ((state |controller_s|)) Bool true)
(define-fun |controller_t| ((state |controller_s|) (next_state |controller_s|)) Bool (and
  (= (|controller#45| state) (|controller#23| next_state)) ; $procdff$231 \state
  (= (|controller#50| state) (|controller#20| next_state)) ; $procdff$225 \spi_c_data_out
  (= (|controller#53| state) (|controller#17| next_state)) ; $procdff$232 \packet_type
  (= (|controller#58| state) (|controller#16| next_state)) ; $procdff$233 \msg_bytes
  (= (|controller#61| state) (|controller#15| next_state)) ; $procdff$227 \freq_wr_divr
  (= (|controller#63| state) (|controller#14| next_state)) ; $procdff$228 \freq_wr_divf
  (= (|controller#67| state) (|controller#13| next_state)) ; $procdff$226 \freq_data
  (= (|controller#69| state) (|controller#12| next_state)) ; $procdff$230 \fifo_wr
  (= (|controller#72| state) (|controller#8| next_state)) ; $procdff$229 \fifo_data_in
  (= (ite (|controller#10| state) #b1 #b0) (|controller#6| next_state)) ; $procdff$216 $past$controller.v:176$2$0
  (= (|controller#76| state) (|controller#5| next_state)) ; $procdff$224 $formal$controller.v:182$11_EN
  (= (|controller#77| state) (|controller#4| next_state)) ; $procdff$223 $formal$controller.v:182$11_CHECK
  (= (|controller#78| state) (|controller#3| next_state)) ; $procdff$222 $formal$controller.v:179$10_EN
  (= (ite (|controller#80| state) #b1 #b0) (|controller#2| next_state)) ; $procdff$221 $formal$controller.v:179$10_CHECK
  (= (|controller#81| state) (|controller#1| next_state)) ; $procdff$220 $formal$controller.v:176$9_EN
  (= (|controller#73| state) (|controller#0| next_state)) ; $procdff$219 $formal$controller.v:176$9_CHECK
)) ; end of module controller
; yosys-smt2-topmod controller
; end of yosys output
